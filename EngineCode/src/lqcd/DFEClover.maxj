package lqcd;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;


/**
 * Represents the clover operator. Use the method applyClover to let the clover act on a spinor.
 *
 * @author Bas Kwaadgras
 */

public class DFEClover extends KernelLib {

	public DFEComplex [][] a;

	private final DFESpinor inSpinor;
	private final DFESpinor outSpinor;

	private final LQCDConstants m_constants;

	protected DFEClover(LQCDConstants constants, DFEVector<DFEComplex> initClover,
			DFEVar cloverDiagShift, DFEVar cloverOffdiagShift,
			DFESpinorType spinorType, DFEType realType) {
		super(constants.getKernel());
		m_constants = constants;
		a = new DFEComplex[2][18];
		for(int i=0; i<2; i++)
		{
			for(int j=0; j<18; j++)
			{
				a[i][j]=initClover[18*i+j].cast(new DFEComplexType(realType));
				if(j==0 || j==10 || j==16)
				{
					a[i][j]=DFEComplexType.newInstance(this,
								a[i][j].getReal() >> cloverDiagShift,
								a[i][j].getImaginary() >> cloverDiagShift
							);
				}
				else
				{
					a[i][j]=DFEComplexType.newInstance(this,
								a[i][j].getReal() >> cloverOffdiagShift,
								a[i][j].getImaginary() >> cloverOffdiagShift
							);
				}
			}
		}
		inSpinor = spinorType.newInstance(constants.getKernel());
		outSpinor = applyClover(inSpinor);
	}

	/**
	 * Apply the clover term to spinor k.
	 * @param k
	 */

	private DFESpinor applyClover(DFESpinor k)
	{
		/*for(int i=0; i<2; i++)
		{
			for(int j=0; j<18; j++)
			{
				debug.simPrintf("clover", outputEnableSpinor,
						"( %10.7f, %10.7f )\n",
							a[i][j].getReal(), a[i][j].getImaginary()
						);
			}
		}*/
		debug.simPrintf("cloverInput = (%f , %f)\n",
				k.s0.getC0().getReal(), k.s0.getC0().getImaginary() );
		debug.simPrintf("cloverA = (%f , %f ) and (%f , %f ) \n",
				a[0][0].getReal(), a[0][0].getImaginary(), a[1][0].getReal(), a[1][0].getImaginary() );

		DFESu3Vector x0 = k.s0 + k.s2;
		DFESu3Vector x1 = k.s1 + k.s3;
		/*kNew.s0 = y0_0 + y0_1;
		kNew.s1 = y1_0 + y1_1;
		kNew.s2 = y0_0 - y0_1;
		kNew.s3 = y1_0 - y1_1;*/
		/*int numBits=k.m_numBits;
		int max=k.m_max;
		DFESpinor kNew = numBits <0 ?
				new DFESpinor(m_constants) :
				new DFESpinor(m_constants, numBits, max);
		kNew.newInstant();*/

		/*DFESu3Vector y0_0 = numBits <0 ?
				new DFESu3Vector(m_constants) :
				new DFESu3Vector(m_constants, numBits, max);
		DFESu3Vector y1_0 = numBits <0 ?
				new DFESu3Vector(m_constants) :
				new DFESu3Vector(m_constants, numBits, max);
		DFESu3Vector y0_1 = numBits <0 ?
				new DFESu3Vector(m_constants) :
				new DFESu3Vector(m_constants, numBits, max);
		DFESu3Vector y1_1 = numBits <0 ?
				new DFESu3Vector(m_constants) :
				new DFESu3Vector(m_constants, numBits, max);*/


		DFEComplex y0_0c0 =
					a[0][0].getReal() * x0.getC0()	+	a[0][1]	* x0.getC1()			+
					a[0][2] * x0.getC2()			+	a[0][3] * x1.getC0()			+
					a[0][4] * x1.getC1()			+	a[0][5] * x1.getC2();
		DFEComplex y0_0c1 =
					a[0][1].conjugate() * x0.getC0()+	a[0][0].getImaginary() * x0.getC1() +
					a[0][6] * x0.getC2()			+	a[0][7] * x1.getC0() 				+
					a[0][8] * x1.getC1()			+	a[0][9] * x1.getC2();

		DFEComplex y0_0c2 =
					a[0][2].conjugate() * x0.getC0()+ 	a[0][6].conjugate() * x0.getC1()	+
					a[0][10].getReal() * x0.getC2()	+ 	a[0][11] * x1.getC0()				+
					a[0][12] * x1.getC1()			+ 	a[0][13] * x1.getC2();

		DFEComplex y1_0c0 =
					a[0][3].conjugate() * x0.getC0()+	a[0][7].conjugate() * x0.getC1()	+
					a[0][11].conjugate() * x0.getC2()+	a[0][10].getImaginary() * x1.getC0()+
					a[0][14] * x1.getC1()			+ 	a[0][15] * x1.getC2();

		DFEComplex y1_0c1 =
					a[0][4].conjugate() * x0.getC0()+	a[0][8].conjugate() * x0.getC1()	+
					a[0][12].conjugate() * x0.getC2()+	a[0][14].conjugate() * x1.getC0()	+
					a[0][16].getReal() * x1.getC1()	+	a[0][17] * x1.getC2();

		DFEComplex y1_0c2 =
					a[0][5].conjugate() * x0.getC0()+	a[0][9].conjugate() * x0.getC1()	+
					a[0][13].conjugate() * x0.getC2()+	a[0][15].conjugate() * x1.getC0()	+
					a[0][17].conjugate() * x1.getC1()+	a[0][16].getImaginary() * x1.getC2();

		/*debug.simPrintf("clover", outputEnableSpinor,
				"== y0 (first time)  = [ ( %10.7f, %10.7f ) ( %10.7f, %10.7f ) ( %10.7f, %10.7f )]\n" +
				"== y1 (first time)  = [ ( %10.7f, %10.7f ) ( %10.7f, %10.7f ) ( %10.7f, %10.7f )]\n",
				y0_0.c0.getReal(), y0_0.c0.getImaginary(),
				y0_0.c1.getReal(), y0_0.c1.getImaginary(),
				y0_0.c2.getReal(), y0_0.c2.getImaginary(),
				y1_0.c0.getReal(), y1_0.c0.getImaginary(),
				y1_0.c1.getReal(), y1_0.c1.getImaginary(),
				y1_0.c2.getReal(), y1_0.c2.getImaginary()
		);*/

		x0 = k.s0 - k.s2;
		x1 = k.s1 - k.s3;

		DFEComplex y0_1c0 =
					a[1][0].getReal() * x0.getC0()	+	a[1][1]	* x0.getC1() 				+
					a[1][2] * x0.getC2()			+	a[1][3] * x1.getC0() 				+
					a[1][4] * x1.getC1()			+	a[1][5] * x1.getC2();

		DFEComplex y0_1c1 =
					a[1][1].conjugate() * x0.getC0()+	a[1][0].getImaginary()	* x0.getC1()+
					a[1][6] * x0.getC2()			+	a[1][7] * x1.getC0()				+
					a[1][8] * x1.getC1()			+	a[1][9] * x1.getC2();

		DFEComplex y0_1c2 =
					a[1][2].conjugate() * x0.getC0()+ 	a[1][6].conjugate() * x0.getC1()	+
					a[1][10].getReal() * x0.getC2()	+ 	a[1][11] * x1.getC0()				+
					a[1][12] * x1.getC1()			+ 	a[1][13] * x1.getC2();

		DFEComplex y1_1c0 =
					a[1][3].conjugate() * x0.getC0()+	a[1][7].conjugate() * x0.getC1() 	+
					a[1][11].conjugate() * x0.getC2()+	a[1][10].getImaginary() * x1.getC0()+
					a[1][14] * x1.getC1()			+ 	a[1][15] * x1.getC2();

		DFEComplex y1_1c1 =
					a[1][4].conjugate() * x0.getC0()+	a[1][8].conjugate() * x0.getC1()	+
					a[1][12].conjugate() * x0.getC2()+	a[1][14].conjugate() * x1.getC0()	+
					a[1][16].getReal() * x1.getC1()	+	a[1][17] * x1.getC2();

		DFEComplex y1_1c2 =
					a[1][5].conjugate() * x0.getC0()	+	a[1][9].conjugate() * x0.getC1() +
					a[1][13].conjugate() * x0.getC2()	+	a[1][15].conjugate() * x1.getC0() +
					a[1][17].conjugate() * x1.getC1()	+	a[1][16].getImaginary() * x1.getC2();

		/*debug.simPrintf("clover", outputEnableSpinor,
				"== y0 (second time) = [ ( %10.7f, %10.7f ) ( %10.7f, %10.7f ) ( %10.7f, %10.7f )]\n" +
				"== y1 (second time) = [ ( %10.7f, %10.7f ) ( %10.7f, %10.7f ) ( %10.7f, %10.7f )]\n",
				y0_1.c0.getReal(), y0_1.c0.getImaginary(),
				y0_1.c1.getReal(), y0_1.c1.getImaginary(),
				y0_1.c2.getReal(), y0_1.c2.getImaginary(),
				y1_1.c0.getReal(), y1_1.c0.getImaginary(),
				y1_1.c1.getReal(), y1_1.c1.getImaginary(),
				y1_1.c2.getReal(), y1_1.c2.getImaginary()
		);*/

		DFEComplex kNews0c0 = y0_0c0 + y0_1c0;
		DFEComplex kNews0c1 = y0_0c1 + y0_1c1;
		DFEComplex kNews0c2 = y0_0c2 + y0_1c2;
		DFEComplex kNews1c0 = y1_0c0 + y1_1c0;
		DFEComplex kNews1c1 = y1_0c1 + y1_1c1;
		DFEComplex kNews1c2 = y1_0c2 + y1_1c2;
		DFEComplex kNews2c0 = y0_0c0 - y0_1c0;
		DFEComplex kNews2c1 = y0_0c1 - y0_1c1;
		DFEComplex kNews2c2 = y0_0c2 - y0_1c2;
		DFEComplex kNews3c0 = y1_0c0 - y1_1c0;
		DFEComplex kNews3c1 = y1_0c1 - y1_1c1;
		DFEComplex kNews3c2 = y1_0c2 - y1_1c2;

		/*DFESpinor kNew = DFESpinor.createInstance(m_constants,
				kNews0c0.getReal().getType());
		kNew.s0.c0=kNews0c0;
		kNew.s0.c1=kNews0c1;
		kNew.s0.c2=kNews0c2;
		kNew.s1.c0=kNews1c0;
		kNew.s1.c1=kNews1c1;
		kNew.s1.c2=kNews1c2;
		kNew.s2.c0=kNews2c0;
		kNew.s2.c1=kNews2c1;
		kNew.s2.c2=kNews2c2;
		kNew.s3.c0=kNews3c0;
		kNew.s3.c1=kNews3c1;
		kNew.s3.c2=kNews3c2;*/
		DFESpinor kNew = DFESpinorType.newInstance(m_constants,
				kNews0c0, kNews0c1, kNews0c2,
				kNews1c0, kNews1c1, kNews1c2,
				kNews2c0, kNews2c1, kNews2c2,
				kNews3c0, kNews3c1, kNews3c2,
				k.m_shift);
		debug.simPrintf("cloverOut = (%f , %f)\n",
				kNew.s0.getC0().getReal(), kNew.s0.getC0().getImaginary() );

		return kNew;
	}

	public DFESpinor getInput()
	{
		return inSpinor;
	}
	public DFESpinor getOutput()
	{
		return outSpinor;
	}
}
